{"version":3,"sources":["assets/logo.svg","assets/github.svg","pages/Dashboard/styles.ts","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","api","axios","create","baseURL","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Loading","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","exact","path","component","createGlobalStyle","github","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd3ee67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.016a2e1c.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.b9dc0fb0.svg\";","import styled, { css } from 'styled-components'\nimport { shade } from 'polished'\n\n\ninterface FormProps {\n    hasError: boolean\n}\n\nexport const Title = styled.h1`\n    font-size: 48px;\n    color: #3A3A3A;\n    max-width: 450px;\n    line-height: 56px;\n\n\n    margin-top: 80px;\n`\n\nexport const Form = styled.form<FormProps>`\n    margin-top: 40px;\n    max-width: 700px;\n\n    display: flex;\n\n    input{\n        flex: 1;\n        height: 70px;\n        padding: 0 24px;\n        border: 0;\n        border-radius: 5px 0 0 5px;\n        color: #a8a8b3;\n        border: 2px solid #fff;\n        border-right: 0;\n\n        ${(props) => props.hasError && css`\n            border-color: #c53030;\n        `}\n\n        &::placeholder{\n            color: #a8a8b3;\n        }\n    }\n\n    button{\n        width: 210px;\n        height: 70px;\n        background: #04D361;\n        border-radius: 0px 5px 5px 0px;\n        border: 0;\n        color: #fff;\n        font-weight: bold;\n        transition: 0.2s;\n\n\n        &:hover{\n            background: ${shade(0.2, '#04D361')}\n        }\n    }\n\n`\n\nexport const Error = styled.span`\n     display: block;\n     color: #c53030;\n     margin-top: 8px;\n`\n\n\nexport const Repositories = styled.div`\n    margin-top: 80px;\n    max-width: 700px;\n\n    a{\n        background: #fff;\n        border-radius: 5px;\n        width: 100%;\n        padding: 24px;\n        display: block;\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        transition: transform 0.2s;\n\n        & + a{\n            margin-top: 16px;\n        }\n\n        &:hover{\n            transform: translateX(10px);\n        }\n\n        img{\n            width: 64px;\n            height: 64px;\n            border-radius: 50%;\n        }\n\n        div{\n            margin: 16px;\n            flex: 1;\n\n            strong{\n                font-size: 20px;\n                color: #3d3d4d;\n            }\n\n            p{\n                font-size: 18px;\n                color: #8a8ab3;\n                margin-top: 4px;\n            }\n        }\n\n        svg{\n            margin-left: auto;\n            color: #cbcbd6;\n        }\n\n\n    }\n`\n","import axios from 'axios'\n\n\nconst api = axios.create({\n    baseURL: 'https://api.github.com',\n});\n\nexport default api\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport logoImg from '../../assets/logo.svg';\nimport { Title, Form, Repositories, Error } from './styles';\nimport api from '../../services/api';\n\ninterface Repository {\n    full_name: string;\n    description: string;\n    owner: {\n        login: string;\n        avatar_url: string;\n    };\n}\n\nconst Dashboard: React.FC = () => {\n    const [newRepo, setNewRepo] = useState('');\n    const [inputError, setInputError] = useState('');\n    const [repositories, setRepositories] = useState<Repository[]>(() => {\n        const storagedRepositories = localStorage.getItem(\n            '@GithubExplorer:repositories',\n        );\n        if (storagedRepositories) {\n            return JSON.parse(storagedRepositories);\n        }\n        return [];\n    });\n\n    useEffect(() => {\n        localStorage.setItem(\n            '@GithubExplorer:repositories',\n            JSON.stringify(repositories),\n        );\n    }, [repositories]);\n\n    async function handleAddReposity(\n        event: FormEvent<HTMLFormElement>,\n    ): Promise<void> {\n        event.preventDefault();\n        if (!newRepo) {\n            setInputError('Digite autor/nome do reposit贸rio');\n            return;\n        }\n\n        try {\n            const response = await api.get<Repository>(`repos/${newRepo}`);\n\n            const repository = response.data;\n\n            setRepositories([...repositories, repository]);\n            setNewRepo('');\n            setInputError('');\n        } catch (err) {\n            setInputError('Erro na busca por esse reposit贸rio');\n        }\n    }\n\n    return (\n        <>\n            <img src={logoImg} alt=\"Github Explorer\" />\n            <Title>Explore reposit贸rios do Github</Title>\n\n            <Form hasError={!!inputError} onSubmit={handleAddReposity}>\n                <input\n                    value={newRepo}\n                    onChange={e => setNewRepo(e.target.value)}\n                    placeholder=\"Digite o nome do reposit贸rio\"\n                />\n                <button type=\"submit\">Pesquisar</button>\n            </Form>\n\n            {inputError && <Error>{inputError}</Error>}\n\n            <Repositories>\n                {repositories.map(repository => (\n                    <Link\n                        key={repository.full_name}\n                        to={`/repositories/${repository.full_name}`}\n                    >\n                        <img\n                            src={repository.owner.avatar_url}\n                            alt={repository.owner.login}\n                        />\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n\n                        <FiChevronRight size={20} />\n                    </Link>\n                ))}\n            </Repositories>\n        </>\n    );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components'\n\n\nexport const Header = styled.header`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    a{\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        color: #8a8a8a;\n        transition: color 0.2s;\n\n        &:hover{\n            color: #666;\n        }\n\n        svg{\n            margin-right: 4px;\n        }\n    }\n`\n\nexport const RepositoryInfo = styled.section`\n    margin-top: 80px;\n\n    header{\n        display: flex;\n        align-items:  center;\n\n        img{\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n        }\n\n        div{\n            margin-left: 24px;\n\n            strong{\n                font-size: 36px;\n                color: #3d3d4d;\n            }\n\n            p{\n                font-size: 18px;\n                color: #737380;\n                margin-top: 4px;\n            }\n        }\n    }\n\n    ul{\n        display: flex;\n        list-style: none;\n        margin-top: 40px;\n\n        li{\n\n            & + li{\n                margin-left: 80px;\n            }\n\n            strong{\n                display: block;\n                font-size: 36px;\n                color: #3d3d4d;\n\n                span{\n                    display: block;\n                    margin-top: 4px;\n                    color: #6c6c80;\n                }\n            }\n        }\n    }\n`\n\nexport const Issues = styled.div`\n    margin-top: 80px;\n\n    a{\n        background: #fff;\n        border-radius: 5px;\n        width: 100%;\n        padding: 24px;\n        display: block;\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        transition: transform 0.2s;\n\n        & + a{\n            margin-top: 16px;\n        }\n\n        &:hover{\n            transform: translateX(10px);\n        }\n\n        div{\n            margin: 16px;\n            flex: 1;\n\n            strong{\n                font-size: 20px;\n                color: #3d3d4d;\n            }\n\n            p{\n                font-size: 18px;\n                color: #8a8ab3;\n                margin-top: 4px;\n            }\n        }\n\n        svg{\n            margin-left: auto;\n            color: #cbcbd6;\n        }\n\n\n    }\n`\n\nexport const Loading = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    max-width: 960px;\n    height: 100vh;\n    z-index: 9999; /* n煤mero m谩ximo 茅 9999 */\n`\n","import React, { useEffect, useState } from 'react'\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport { VscLoading } from 'react-icons/vsc';\nimport { useRouteMatch, Link } from 'react-router-dom'\n\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\nimport { Header, Issues, Loading, RepositoryInfo } from './styles';\n\n\ninterface RepositoryParams {\n    repositories: string\n}\n\n\ninterface Repository {\n    full_name: string;\n    description: string;\n    stargazers_count: number;\n    forks_count: number;\n    open_issues_count: number;\n    owner: {\n        login: string;\n        avatar_url: string;\n    };\n}\n\ninterface Issue {\n    id: number;\n    title: string;\n    html_url: string;\n    user: {\n        login: string;\n    }\n}\n\nconst Repository: React.FC = () => {\n    const [repository, setRepository] = useState<Repository | null>(null)\n    const [issues, setIssues] = useState<Issue[]>([])\n\n    const { params } = useRouteMatch<RepositoryParams>();\n\n    useEffect(() => {\n        api.get(`repos/${params.repositories}`).then((response) => {\n            setRepository(response.data)\n        });\n\n        api.get(`repos/${params.repositories}/issues`).then((response) => {\n            setIssues(response.data)\n        });\n    }, [params.repositories])\n\n\n    return (\n        <>\n            <Header>\n                <img src={logoImg} alt=''></img>\n                <Link to='/'>\n                    <FiChevronLeft size={16} />\n                Voltar\n                </Link>\n            </Header>\n\n            {repository ? (\n                <RepositoryInfo>\n                    <header>\n                        <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n                    </header>\n                    <ul>\n                        <li>\n                            <strong>{repository.stargazers_count}</strong>\n                            <span>Starr</span>\n                        </li>\n\n                        <li>\n                            <strong>{repository.forks_count}</strong>\n                            <span>Forks</span>\n                        </li>\n\n                        <li>\n                            <strong>{repository.open_issues_count}</strong>\n                            <span>Issues abertas</span>\n                        </li>\n                    </ul>\n                </RepositoryInfo>\n            ) : (\n                    <Loading><VscLoading size={60}/></Loading>\n                )}\n\n            <Issues>\n                {issues.map((issue) => (\n                    <a key={issue.id} href={issue.html_url} target='blank'>\n                        <div>\n                            <strong>{issue.title}</strong>\n                            <p>{issue.user.login}</p>\n                        </div>\n                        <FiChevronRight size={20} />\n                    </a>\n                ))}\n            </Issues>\n        </>\n    )\n}\n\nexport default Repository;\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Dashboard from '../pages/Dashboard'\nimport Repository from '../pages/Repository'\n\n\nconst Routes: React.FC = () => (\n    <Switch>\n        <Route exact path='/' component={Dashboard}></Route>\n        <Route path='/repositories/:repositories+' component={Repository}></Route>\n    </Switch>\n)\n\n\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components'\nimport github from '../assets/github.svg'\n\nexport default createGlobalStyle`\n    *{\n        margin: 0;\n        padding: 0;\n        outline: none;\n        box-sizing: border-box;\n    }\n\n    body{\n        background: #F0F0F5 url(${github}) no-repeat 70% top;\n\n    }\n\n    body, input, button {\n        font: 16px Roboto, sans-serif;\n    }\n\n    #root{\n        max-width: 960px;\n        margin: 0 auto;\n        padding: 40px 20px\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n`\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nfunction App() {\n    return (\n        <>\n            <HashRouter>\n                <Routes />\n            </HashRouter>\n            <GlobalStyle />\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}